from logger import Logger
import numpy as np
import matplotlib.pyplot as plt
from utils import *

class Wing:
    def __init__(self):
        self.area = 15
        # heading is perpendicular to the surface of the wing, pointing forward
        self.heading = np.array([1, 0])

class Boat:
    def __init__(self):
        self.mass = 50
        self.position = np.zeros(2)
        self.velocity = np.zeros(2)
        self.acceleration = np.zeros(2)
        self.heading = np.array([1, 0])
        self.wing = Wing()
    
    def position_matrix(self):
        return np.array([*self.position, compute_angle(self.heading)])

class Wind:
    def __init__(self):
        self.density = 1.293
        self.velocity = np.zeros(2)

class World:
    def __init__(self, wind: Wind, boat: Boat):
        self.gravity_z = 9.81
        self.wind = wind
        self.boat = boat
    
    def update(self, dt):
        # apply friction to the boat
        # https://github.com/duncansykes/PhysicsForGames/blob/main/Physics_Project/Rigidbody.cpp
        gravity = normalize(self.boat.velocity) * self.gravity_z
        damping = 0.01
        self.boat.velocity -= self.boat.velocity * damping * compute_magnitude(gravity) * dt

        # apply wind force to the boat
        wind_force = compute_wind_force(self.wind, self.boat)

        self.boat.acceleration = compute_acceleration(wind_force, self.boat.mass)
        self.boat.velocity += (self.boat.acceleration * dt)
        self.boat.position += (self.boat.velocity * dt)

def compute_acceleration(force, mass):
    return force / mass

# air_density [kg / m^3]
# wing_area [m^2]
# wind_velocity [(m/s, m/s)]
# computes the force generated by the wind on the wing of a boat
# the force is max when the wind is perpendicular to the wing, and 0 when it's parallel
# so multiply the force by a gain that is computed using the sin of the angle between the
# wing and the wind
def compute_wind_force(wind: Wind, boat: Boat):
    air_mass = wind.density * boat.wing.area
    wind_force = air_mass * wind.velocity

    return np.dot(wind_force, boat.wing.heading) * boat.wing.heading
