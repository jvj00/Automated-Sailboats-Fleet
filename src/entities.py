from actuator import Stepper, StepperController
from logger import Logger
import numpy as np
from utils import *
from simple_pid import PID

class Wing(StepperController):
    def __init__(self, area: float, stepper: Stepper):
        super().__init__(stepper)
        self.area = area

class Rudder(StepperController):
    def __init__(self, stepper: Stepper):
        super().__init__(stepper)

class Wind:
    def __init__(self, density: float):
        self.density = density
        self.velocity = np.zeros(2)

class Boat:
    def __init__(self, mass, wing: Wing, rudder: Rudder, pid: PID):
        self.mass = mass
        self.position = np.zeros(2)
        self.velocity = np.zeros(2)
        self.acceleration = np.zeros(2)
        self.heading = polar_to_cartesian(1, 0)
        self.wing = wing
        self.rudder = rudder
        self.damping = 0.005
        self.angular_damping = 0.01
        self.target = None
        self.pid = pid

    def position_matrix(self):
        return np.array([*self.position, compute_angle(self.heading)])
    
    # compute the rotation rate
    # the rotation rate is directly proportional to the rudder angle and the boat velocity.
    # the higher is the rudder angle and the boat velocity, the higher will be the rotation rate of the boat
    # the result is scaled is using an angular damping
    def rotate(self, dt):
        rotation_rate = self.rudder.get_angle() * self.angular_damping
        rotation_angle = rotation_rate * compute_magnitude(self.velocity) * dt
        _, current_angle = cartesian_to_polar(self.heading)
        current_angle += rotation_angle
        self.heading = polar_to_cartesian(1, current_angle)
    
    def translate(self, dt):
        self.velocity += (self.acceleration * dt)
        self.position += (self.velocity * dt)

    def move(self, dt):
        # if self.target is not None:
        #     self.follow_target(dt)
        # self.rudder.move(dt)
        # self.wing.move(dt)
        self.rotate(dt)
        self.translate(dt)

    # compute the acceleration that the wind produces to the boat
    # in order to avoid 
    def apply_wind(self, wind: Wind):
        wind_force = compute_wind_force(wind, self)
        # scale the wind force along the boat heading
        wind_force = np.dot(wind_force, self.heading) * self.heading
        self.acceleration = compute_acceleration(wind_force, self.mass)

    # https://github.com/duncansykes/PhysicsForGames/blob/main/Physics_Project/Rigidbody.cpp
    def apply_friction(self, gravity: float, dt):
        g = normalize(self.velocity) * gravity
        self.velocity -= self.velocity * self.damping * compute_magnitude(g) * dt

    def set_target(self, target):
        self.target = target
    
    def follow_target(self, dt):
        self.pid.sample_time = dt
        distance_from_target = compute_distance(self.position, self.target)
        control = self.pid(distance_from_target)
        # FIXME must use rudder.set_target instead
        self.rudder.stepper.set_angle(control)

class World:
    def __init__(self, gravity, wind: Wind, boat: Boat):
        self.gravity_z = gravity
        self.wind = wind
        self.boat = boat
    
    def update(self, dt):
        self.boat.apply_friction(self.gravity_z, dt)
        self.boat.apply_wind(self.wind)
        self.boat.move(dt)

def compute_acceleration(force, mass):
    return force / mass

# source: ChatGPT
# F drag​ = 0.5 × CD × ρ × A × (∣Vrelative∣**2)
# compute the force generated by the wind beating to the wing
# the force is then scaled along the boat heading
def compute_wind_force(wind: Wind, boat: Boat):
    drag_coeff = 0.5
    v_relative = wind.velocity - boat.velocity
    v_relative_mag = compute_magnitude(v_relative)
    if v_relative_mag == 0:
        return np.zeros(2)
    Logger.debug(boat.velocity)
    f_drag_mag = 0.5 * drag_coeff * wind.density * boat.wing.area * (v_relative_mag ** 2)
    f_wind = f_drag_mag * (v_relative / v_relative_mag)
    return f_wind