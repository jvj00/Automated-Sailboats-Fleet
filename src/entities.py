from actuator import Stepper, StepperController
from logger import Logger
import numpy as np
from utils import *

class Wing(StepperController):
    def __init__(self, area: float, stepper: Stepper):
        super().__init__(stepper)
        self.area = area

class Rudder(StepperController):
    def __init__(self, stepper: Stepper):
        super().__init__(stepper)

class Wind:
    def __init__(self, density: float):
        self.density = density
        self.velocity = np.zeros(2)

class Boat:
    def __init__(self, mass, wing: Wing, rudder: Rudder):
        self.mass = mass
        self.position = np.zeros(2)
        self.velocity = np.zeros(2)
        self.acceleration = np.zeros(2)
        self.heading = np.zeros(2)
        self.wing = wing
        self.rudder = rudder
        self.damping = 0.005
    
    def position_matrix(self):
        return np.array([*self.position, compute_angle(self.heading)])
    
    def move(self, dt):
        self.rudder.move(dt)
        self.wing.move(dt)
        self.heading = self.rudder.get_heading()
        self.acceleration = np.dot(self.acceleration, self.heading) * self.heading
        self.velocity += (self.acceleration * dt)
        self.position += (self.velocity * dt)
    
    def apply_wind(self, wind: Wind):
        wind_force = compute_wind_force(wind, self.wing)
        wind_force = np.dot(wind_force, self.heading) * self.heading
        self.acceleration = compute_acceleration(wind_force, self.mass)

    # https://github.com/duncansykes/PhysicsForGames/blob/main/Physics_Project/Rigidbody.cpp
    def apply_friction(self, gravity: float, dt):
        g = normalize(self.velocity) * gravity
        self.velocity -= self.velocity * self.damping * compute_magnitude(g) * dt

class World:
    def __init__(self, gravity, wind: Wind, boat: Boat):
        self.gravity_z = gravity
        self.wind = wind
        self.boat = boat
    
    def update(self, dt):
        self.boat.apply_friction(self.gravity_z, dt)
        self.boat.apply_wind(self.wind)
        self.boat.move(dt)

def compute_acceleration(force, mass):
    return force / mass

# air_density [kg / m^3]
# wing_area [m^2]
# wind_velocity [(m/s, m/s)]
# computes the force generated by the wind on the wing of a boat
def compute_wind_force(wind: Wind, wing: Wing):
    air_mass = wind.density * wing.area
    wind_force = air_mass * wind.velocity
    wind_heading = wing.get_heading()
    return np.dot(wind_force, wind_heading) * wind_heading
